{"version":3,"sources":["components/search_bar.js","components/video_list_item.js","components/video_list.js","components/video_detail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","onInputChange","bind","event","this","setState","target","value","onSearchTermChange","className","onChange","React","Component","VideoListItem","video","onUserSelected","imageUrl","snippet","thumbnails","default","url","onClick","src","title","VideoList","videoItems","videos","map","onVideoSelect","key","etag","VideoDetail","videoId","id","description","App","selectedVideo","videoSearch","searchTerm","YTSearch","data","console","log","userSelected","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QA4BeA,E,YAzBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAAEC,KAAM,IAErB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAJP,E,2EAOJC,GACVC,KAAKC,SAAS,CAAEL,KAAMG,EAAMG,OAAOC,QACnCH,KAAKN,MAAMU,mBAAmBL,EAAMG,OAAOC,S,+BAI3C,OACI,yBAAKE,UAAU,cACX,2BACIF,MAAOH,KAAKL,MAAMC,KAClBU,SAAUN,KAAKH,qB,GAlBXU,IAAMC,W,iBCoBfC,EApBO,SAACf,GACnB,IAAMgB,EAAQhB,EAAMgB,MACdC,EAAiBjB,EAAMiB,eAEvBC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAElD,OACA,wBAAIC,QAAS,kBAAMN,EAAeD,IAAQL,UAAU,mBAChD,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eAAea,IAAKN,KAEvC,yBAAKP,UAAU,cACX,yBAAKA,UAAU,iBAAiBK,EAAMG,QAAQM,WCK/CC,EAjBG,SAAC1B,GACf,IAAM2B,EAAa3B,EAAM4B,OAAOC,IAAI,SAACb,GACjC,OACI,kBAAC,EAAD,CACIC,eAAgBjB,EAAM8B,cACtBC,IAAKf,EAAMgB,KACXhB,MAAOA,MAInB,OACI,wBAAIL,UAAU,uBACTgB,ICUEM,EAvBK,SAACjC,GACjB,IAAMgB,EAAQhB,EAAMgB,MAEpB,IAAIA,EACA,OAAO,2CAGX,IAAMkB,EAAUlB,EAAMmB,GAAGD,QACnBZ,EAAG,wCAAoCY,GAE7C,OACI,yBAAKvB,UAAU,yBACX,yBAAKA,UAAU,2CACX,4BAAQA,UAAU,wBAAwBa,IAAKF,KAEnD,yBAAKX,UAAU,WACX,6BAAMK,EAAMG,QAAQM,OACpB,6BAAMT,EAAMG,QAAQiB,gBCyBrBC,E,YAlCb,WAAYrC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACT2B,OAAQ,GACRU,cAAe,MAGnB,EAAKC,YAAY,mBARD,E,yEAWRC,GAAa,IAAD,OACtBC,IAAS,CAACV,IAhBI,0CAgBU7B,KAAMsC,GAAa,SAACE,GAC1CC,QAAQC,IAAIF,GACV,EAAKnC,SAAS,CACVqB,OAAQc,EACRJ,cAAeI,EAAK,S,+BAKlB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAWhC,mBAAoB,SAAA8B,GAAU,OAAI,EAAKD,YAAYC,MAC9D,kBAAC,EAAD,CAAaxB,MAAOV,KAAKL,MAAMqC,gBAC/B,kBAAC,EAAD,CACER,cAAe,SAAAe,GAAY,OAAI,EAAKtC,SAAS,CAAC+B,cAAeO,KAC7DjB,OAAQtB,KAAKL,MAAM2B,c,GA7BXd,aCGEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.32019128.chunk.js","sourcesContent":["import React from 'react';\n\nclass SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { term: '' };\n\n        this.onInputChange = this.onInputChange.bind(this);\n    }\n\n    onInputChange(event) {\n        this.setState({ term: event.target.value });\n        this.props.onSearchTermChange(event.target.value);\n    }\n\n    render(){\n        return (\n            <div className=\"search-bar\">\n                <input                \n                    value={this.state.term}\n                    onChange={this.onInputChange} \n                />               \n            </div>\n        );        \n    }\n\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst VideoListItem = (props) => {\n    const video = props.video;\n    const onUserSelected = props.onUserSelected;\n    // console.log(video);    \n    const imageUrl = video.snippet.thumbnails.default.url;\n\n    return (\n    <li onClick={() => onUserSelected(video)} className=\"list-group-item\">\n        <div className=\"video-list media\">\n            <div className=\"media-left\">\n                <img className=\"media-object\" src={imageUrl} />\n            </div>\n            <div className=\"media-body\">\n                <div className=\"media-heading\">{video.snippet.title}</div>\n            </div>\n        </div>\n    </li>\n    );\n};\n\nexport default VideoListItem;","import React from 'react';\nimport VideoListItem from '../components/video_list_item';\n\nconst VideoList = (props) => {\n    const videoItems = props.videos.map((video) => {\n        return (\n            <VideoListItem \n                onUserSelected={props.onVideoSelect}           \n                key={video.etag} \n                video={video} />\n        );\n    });\n\n    return (\n        <ul className=\"col-md-4 list-group\">\n            {videoItems}\n        </ul>\n    );\n};\n\nexport default VideoList;","import React from 'react';\n\nconst VideoDetail = (props) => {\n    const video = props.video;\n    \n    if(!video){\n        return <div>Loading...</div>;\n    }\n    \n    const videoId = video.id.videoId;\n    const url = `https://www.youtube.com/embed/${videoId}`;\n\n    return (\n        <div className=\"video-detail col-md-8\">\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe className=\"embed-responsive-item\" src={url}></iframe>\n            </div>\n            <div className=\"details\">\n                <div>{video.snippet.title}</div>\n                <div>{video.snippet.description}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default VideoDetail;\n","import React, { Component } from 'react';\nimport SearchBar from '../src/components/search_bar';\nimport YTSearch from 'youtube-api-search';\nimport VideoList from '../src/components/video_list'\n// import 'bootstrap/dist/css/bootstrap.css'\nimport VideoDetail from '../src/components/video_detail';\nconst API_KEY = 'AIzaSyAtdlqcMN8KkeMPc2rCfHHFVHUsg3gPW28';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = { \n        videos: [],\n        selectedVideo: null\n    };\n\n    this.videoSearch('React Tutorials');\n}\n\nvideoSearch(searchTerm) {\n  YTSearch({key: API_KEY, term: searchTerm}, (data) => {\n    console.log(data);\n      this.setState({ \n          videos: data,\n          selectedVideo: data[0]\n      });\n  });\n\n}\n  render() {\n    return (\n      <div>\n        <SearchBar onSearchTermChange={searchTerm => this.videoSearch(searchTerm)}/>\n        <VideoDetail video={this.state.selectedVideo}/>\n        <VideoList \n          onVideoSelect={userSelected => this.setState({selectedVideo: userSelected})}\n          videos={this.state.videos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}